#version 330 core

layout (location = 0) out vec4 color;

in vec3 v_position;
in vec3 v_normal;
in vec2 v_texture_coords;

struct Material {
    vec3 ambient_color;
};

struct AmbientLight {
    vec3 color;
    float intensity;
};

struct DirectionalLight {
    vec3 color;
    float intensity;
    vec3 direction;
};

uniform vec3 u_camera_position_local;
uniform Material u_material;
uniform AmbientLight u_ambient_light;
uniform DirectionalLight u_directional_light;
uniform sampler2D u_albedo;
uniform sampler2D u_occlusion_roughness_metallic;

#define PI 3.14159265359

// Trowbridge–Reitz (GGX) distribution
float distribution_ggx(float NoH, float roughness) {
    float one_minus_NoH2 = 1.0 - NoH * NoH;
    float a = NoH * roughness;
    float k = roughness / (one_minus_NoH2 + a * a);
    return k * k * (1.0 / PI);
}

// Schlick geometric shadowing/masking approximation
float geometry_schlick_ggx(float NoV, float roughness) {
    float a = roughness * roughness;
    float k = a / 2.0;
    return NoV / (NoV * (1.0 - k) + k);
}

// Fresnel-Schlick approximation
vec3 fresnel_schlick(float VoH, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - VoH, 5.0);
}

void main() {
    vec4 albedo = texture(u_albedo, v_texture_coords);
    vec4 occlusion_roughness_metallic = texture(u_occlusion_roughness_metallic, v_texture_coords);
    float occlusion = occlusion_roughness_metallic.r;
    float roughness = occlusion_roughness_metallic.g;
    float metallic = occlusion_roughness_metallic.b;

    vec3 N = normalize(v_normal);
    vec3 L = normalize(-u_directional_light.direction);
    vec3 V = normalize(u_camera_position_local - v_position);
    vec3 H = normalize(L + V);

    float NoV = max(dot(N, V), 0.0);
    float NoL = max(dot(N, L), 0.0);
    float NoH = max(dot(N, H), 0.0);
    float VoH = max(dot(V, H), 0.0);

    // F0 is calculated using the IOR (index of refraction), we approximate it to 0.04 for non-metals and use the albedo for metals
    vec3 F0 = mix(vec3(0.04), albedo.rgb, metallic);
    vec3 F = fresnel_schlick(VoH, F0);
    float D = distribution_ggx(NoH, roughness);
    float G = geometry_schlick_ggx(NoV, roughness) * geometry_schlick_ggx(NoL, roughness);
    
    vec3 diffuse = (1.0 - F) * albedo.rgb / PI;
    vec3 specular = F * G * D / (4.0 * NoV * NoL);

    vec3 direct = (diffuse + specular) * u_directional_light.color * u_directional_light.intensity * NoL;

    // TODO use occlusion
    color = vec4(direct, albedo.a);
}
