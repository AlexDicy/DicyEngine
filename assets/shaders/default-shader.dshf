#version 330 core

layout(location = 0) out vec4 color;

in vec3 v_position;
in vec4 v_color;
in vec3 v_normal;
in vec2 v_texture_coords;

struct Material {
    vec3 ambient_color;
};

struct AmbientLight {
    vec3 color;
    float intensity;
};

struct DirectionalLight {
    vec3 color;
    float intensity;
    vec3 direction;
};

uniform vec3 u_camera_position_local;
uniform Material u_material;
uniform AmbientLight u_ambient_light;
uniform DirectionalLight u_directional_light;
uniform sampler2D u_texture;

void main() {
    vec4 ambient_light = vec4(u_material.ambient_color * u_ambient_light.color * u_ambient_light.intensity, 1.0);

    vec4 diffuse_color = vec4(0.0, 0.0, 0.0, 0.0);
    vec4 specular_color = vec4(0.0, 0.0, 0.0, 0.0);

    float diffuse_factor = dot(normalize(v_normal), -u_directional_light.direction);
    if (diffuse_factor > 0.0) {
        diffuse_color = vec4(u_directional_light.color * diffuse_factor, 1.0);

        vec3 view_direction = normalize(u_camera_position_local - v_position);
        vec3 reflect_direction = normalize(reflect(u_directional_light.direction, v_normal));

        float specular_factor = dot(view_direction, reflect_direction);
        if (specular_factor > 0.0) {
            specular_factor = pow(specular_factor, 255.0);
            specular_color = vec4(u_directional_light.color * specular_factor, 1.0);
        }
    }

    vec4 light_color = clamp((ambient_light + diffuse_color + specular_color), 0.0, 1.0);
    color = texture(u_texture, v_texture_coords) * v_color * light_color;
}
