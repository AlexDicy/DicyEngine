plugins {
    id 'java'
}

group = 'com.dicydev.engine'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(Test).configureEach {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += "--enable-preview"
}


tasks.register('runEngine', EngineExec) {
    dependsOn("build")
}

// This class is used to run the engine executable and extend the JavaExec task to
// get the JVM arguments generated by the IDE
class EngineExec extends JavaExec {
    protected String xmakeExecutable = "xmake"

    EngineExec() {
        def xmakeEnvExecutable = System.getenv("XMAKE_EXECUTABLE")
        if (xmakeEnvExecutable != null && project.file(xmakeEnvExecutable).exists()) {
            this.xmakeExecutable = xmakeEnvExecutable
        } else if (project.file("/opt/homebrew/bin/xmake").exists()) {
            this.xmakeExecutable = "/opt/homebrew/bin/xmake"
        } else if (project.file("/usr/local/bin/xmake").exists()) {
            this.xmakeExecutable = "/usr/local/bin/xmake"
        }
    }

    @Override
    void exec() {
        this.buildEngine()

        def output = new ByteArrayOutputStream()
        project.exec {
            workingDir = project.file('../')
            environment 'XMAKE_COLORTERM', 'nocolor'
            commandLine xmakeExecutable, 'show', '-t', 'Engine'
            standardOutput = output
        }

        def lines = output.toString().readLines()
        def targetLine = lines.find { it.trim().startsWith('targetfile:') }
        if (targetLine) {
            def path = targetLine.split(':', 2)[1].trim()
            def executable = path.replace('\\', '/')
            def absolutePath = project.file('../' + executable).getAbsolutePath()
            def jvmArgs = this.getJvmArgs().join(' ')
            def jdkBinPath = javaLauncher.get().getExecutablePath().getAsFile().getParent()
            project.exec {
                workingDir = project.file('../Engine')
                environment 'PATH', System.getenv('PATH') + File.pathSeparator + jdkBinPath
                environment 'JVM_ARGS', jvmArgs
                commandLine absolutePath
            }
        } else {
            throw new GradleException("Could not find the engine executable (targetfile in 'xmake show' output is missing)")
        }
    }

    void buildEngine() {
        project.exec {
            workingDir = project.file('../')
            commandLine xmakeExecutable, 'build', '-y'
        }
    }
}
